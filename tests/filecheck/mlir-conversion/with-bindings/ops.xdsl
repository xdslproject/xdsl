// RUN: xdsl-opt -t mlir %s | mlir-opt | filecheck %s

// Tests if the non generic form can be printed.

// CHECK: module {
builtin.module() {
  func.func() ["sym_name" = "simple_ops", "function_type" = !fun<[], []>, "sym_visibility" = "private"]{
    %0 : !i32 = arith.constant() ["value" = 42 : !i32]
    %1 : !i32 = arith.constant() ["value" = 42 : !i32]
    %2 : !i32 = arith.addi(%0 : !i32, %1 : !i32) 
    %3 : !i32 = arith.subi(%0 : !i32, %1 : !i32) 
    %4 : !i32 = arith.muli(%0 : !i32, %1 : !i32) 
    %5 : !i32 = arith.floordivsi(%0 : !i32, %1 : !i32) 
    %6 : !i32 = arith.remsi(%0 : !i32, %1 : !i32) 
    func.return()
  }

  func.func() ["sym_name" = "regions", "function_type" = !fun<[], []>, "sym_visibility" = "private"]
  {
    %init : !i32 = arith.constant()["value" = 0 : !i32]
    %res : !i32 = scf.while(%init : !i32)
    {
    ^0(%arg : !i32):
      %zero : !i32 = arith.constant()["value" = 0 : !i32]
      %condition : !i1 = arith.cmpi(%zero : !i32, %arg : !i32) ["predicate" = 1 : !i64]
      scf.condition(%condition : !i1, %zero : !i32)
    }
    {
    ^1(%arg2 : !i32):
       scf.yield(%arg2 : !i32)
    }
    func.return()
  }

  func.func() ["sym_name" = "successors", "function_type" = !fun<[!i32], []>, "sym_visibility" = "private"]
  {
  ^2(%21: !i32):
    cf.br(%21: !i32)(^3)
  ^3(%22: !i32):
    cf.br(%22: !i32)(^3)
  }

  func.func() ["sym_name" = "operand_segment_sizes", "function_type" = !fun<[!i1, !i32], [!i32]>, "sym_visibility" = "private"]
  {
  ^4(%c : !i1, %a: !i32):
    cf.br(%c : !i1, %a : !i32)(^5)
  ^5(%cond : !i1, %arg1: !i32):
    cf.cond_br(%cond: !i1, %cond: !i1, %arg1 : !i32, %arg1 : !i32, %arg1 : !i32, %arg1 : !i32)(^5, ^6) ["operand_segment_sizes" = !dense<!vector<[3 : !i64], !i32>, [1 : !i32, 2 : !i32, 3 : !i32]>]
  ^6(%24 : !i32, %25 : !i32, %26 : !i32):
    func.return(%24 : !i32)
  }

  memref.global() ["sym_name" = "complex_types", "type" = !memref<[1 : !i64], !index>, "initial_value" = !dense<!tensor<[1 : !i64], !index>, [0 : !index]>, "sym_visibility" = "public"]

}
