// RUN: xdsl-opt %s | xdsl-opt | filecheck %s

builtin.module() {
  
  memref.global() ["sym_name" = "g", "type" = !memref<[1 : !i64], !index>, "initial_value" = array<!i32: 0>, "sym_visibility" = "public"]

  func.func() ["sym_name" = "memref_test", "function_type" = !fun<[], []>, "sym_visibility" = "private"] {
    %0 : !memref<[1 : !i64], !index> = memref.get_global() ["name" = @g]
    %1 : !index = arith.constant() ["value" = 0 : !index]
    %2 : !memref<[1 : !index], !index> = memref.alloca() ["alignment" = 0 : !i64, "operand_segment_sizes" = array<!i32: 0, 0>]
    %3 : !index = arith.constant() ["value" = 42 : !index]
    memref.store(%3 : !index, %2 : !memref<[1 : !index], !index>, %1 : !index)
    %4 : !index = memref.load(%2 : !memref<[1 : !index], !index>, %1 : !index)
    %5 : !memref<[10 : !index, 2 : !index], !index> = memref.alloc() ["alignment" = 0 : !i64, "operand_segment_sizes" = array<!i32: 0, 0>]
    memref.store(%3 : !index, %5 : !memref<[10 : !index, 2 : !index], !index>, %3 : !index, %4 : !index)
    memref.dealloc(%2 : !memref<[1 : !index], !index>)
    memref.dealloc(%5 : !memref<[10 : !index, 2 : !index], !index>)
    func.return()
  }

  // CHECK: memref.global() ["sym_name" = "g", "type" = !memref<[1 : !i64], !index>, "initial_value" = array<!i32: 0>, "sym_visibility" = "public"]
  // CHECK-NEXT: func.func() ["sym_name" = "memref_test"
  // CHECK-NEXT:  %{{.*}} : !memref<[1 : !i64], !index> = memref.get_global() ["name" = @g]
  // CHECK-NEXT:  %{{.*}} : !index = arith.constant() ["value" = 0 : !index]
  // CHECK-NEXT:  %{{.*}} : !memref<[1 : !index], !index> = memref.alloca() ["alignment" = 0 : !i64, "operand_segment_sizes" = array<!i32: 0, 0>]
  // CHECK-NEXT:  %{{.*}} : !index = arith.constant() ["value" = 42 : !index]
  // CHECK-NEXT:  memref.store(%{{.*}} : !index, %{{.*}} : !memref<[1 : !index], !index>, %{{.*}} : !index)
  // CHECK-NEXT:  %{{.*}} : !index = memref.load(%{{.*}} : !memref<[1 : !index], !index>, %{{.*}} : !index)
  // CHECK-NEXT:  %{{.*}} : !memref<[10 : !index, 2 : !index], !index> = memref.alloc() ["alignment" = 0 : !i64, "operand_segment_sizes" = array<!i32: 0, 0>]
  // CHECK-NEXT:  memref.store(%{{.*}} : !index, %{{.*}} : !memref<[10 : !index, 2 : !index], !index>, %{{.*}} : !index, %{{.*}} : !index)
  // CHECK-NEXT:  memref.dealloc(%{{.*}} : !memref<[1 : !index], !index>)
  // CHECK-NEXT:  memref.dealloc(%{{.*}} : !memref<[10 : !index, 2 : !index], !index>)
  // CHECK-NEXT:  func.return()

}
