// RUN: xdsl-opt %s | xdsl-opt | filecheck %s

// Check that SSA values and blocks can reuse names across regions

builtin.module() {

// CHECK: builtin.module() {

  // Two functions that share a basic block name and a value name
  func.func() ["sym_name" = "id", "function_type" = !fun<[!i32], [!i32]>, "sym_visibility" = "private"] {
    ^0(%0 : !i32):
      func.return(%0 : !i32)
  }

// CHECK-NEXT:   func.func() ["sym_name" = "id", "function_type" = !fun<[!i32], [!i32]>, "sym_visibility" = "private"] {
// CHECK-NEXT:     ^{{.*}}(%{{.*}} : !i32):
// CHECK-NEXT:       func.return(%{{.*}} : !i32)
// CHECK-NEXT:   }


  func.func() ["sym_name" = "id2", "function_type" = !fun<[!i64], [!i64]>, "sym_visibility" = "private"] {
    ^0(%0 : !i64):

      func.return(%0 : !i64)
  }

// CHECK-NEXT:   func.func() ["sym_name" = "id2", "function_type" = !fun<[!i64], [!i64]>, "sym_visibility" = "private"] {
// CHECK-NEXT:     ^{{.*}}(%{{.*}} : !i64):
// CHECK-NEXT:       func.return(%{{.*}} : !i64)
// CHECK-NEXT:   }


  // Check that blocks in nested regions can clash names with the outer region blocks
  func.func() ["sym_name" = "id2", "function_type" = !fun<[!i1], [!i1]>, "sym_visibility" = "private"] {
    ^0(%0 : !i1):
      scf.if(%0 : !i1) {
        ^0:
          scf.yield()
      } {
        ^0:
          scf.yield()
      }
      func.return(%0 : !i1)
  }

// CHECK-NEXT:   func.func() ["sym_name" = "id2", "function_type" = !fun<[!i1], [!i1]>, "sym_visibility" = "private"] {
// CHECK-NEXT:     ^{{.*}}(%{{.*}} : !i1):
// CHECK-NEXT:       scf.if(%{{.*}} : !i1) {
// CHECK-NEXT:         scf.yield()
// CHECK-NEXT:       } {
// CHECK-NEXT:         scf.yield()
// CHECK-NEXT:       }
// CHECK-NEXT:       func.return(%{{.*}} : !i1)
// CHECK-NEXT:   }


  // Check that SSA names can be reused as long as they are defined after
  func.func() ["sym_name" = "id2", "function_type" = !fun<[!i1], [!i1]>, "sym_visibility" = "private"] {
    ^0(%0 : !i1):
      scf.if(%0 : !i1) {
        %1 : !i32 = arith.constant() ["value" = 3 : !i32]
        scf.yield()
      } {
        scf.yield()
      }
      %1 : !i32 = arith.constant() ["value" = 3 : !i32]
      func.return(%0 : !i1)
  }

// CHECK-NEXT:   func.func() ["sym_name" = "id2", "function_type" = !fun<[!i1], [!i1]>, "sym_visibility" = "private"] {
// CHECK-NEXT:   ^{{.*}}(%{{.*}} : !i1):
// CHECK-NEXT:     scf.if(%{{.*}} : !i1) {
// CHECK-NEXT:       %{{.*}} : !i32 = arith.constant() ["value" = 3 : !i32]
// CHECK-NEXT:       scf.yield()
// CHECK-NEXT:     } {
// CHECK-NEXT:       scf.yield()
// CHECK-NEXT:     }
// CHECK-NEXT:     %{{.*}} : !i32 = arith.constant() ["value" = 3 : !i32]
// CHECK-NEXT:     func.return(%{{.*}} : !i1)
// CHECK-NEXT:   }

}

// CHECK-NEXT: }
