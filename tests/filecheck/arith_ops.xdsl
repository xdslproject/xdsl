// RUN: xdsl-opt %s | xdsl-opt | filecheck %s

builtin.module() {
func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "divsi"] {
^0(%0 : !i32, %1 : !i32):
  %2 : !i32 = arith.divsi(%0 : !i32, %1 : !i32)
  func.return(%2 : !i32)
}

//CHECK:   %{{.*}} : !i32 = arith.divsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "divsi_index"] {
^1(%3 : !index, %4 : !index):
  %5 : !index = arith.divsi(%3 : !index, %4 : !index)
  func.return(%5 : !index)
}

// CHECK:   %{{.*}} : !index = arith.divsi(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "divui"] {
^4(%12 : !i32, %13 : !i32):
  %14 : !i32 = arith.divui(%12 : !i32, %13 : !i32)
  func.return(%14 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.divui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "divui_index"] {
^5(%15 : !index, %16 : !index):
  %17 : !index = arith.divui(%15 : !index, %16 : !index)
  func.return(%17 : !index)
}

// CHECK:   %{{.*}} : !index = arith.divui(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "ceildivi"] {
^0(%0 : !i32, %1 : !i32):
  %2 : !i32 = arith.ceildivsi(%0 : !i32, %1 : !i32)
  func.return(%2 : !i32)
}

//CHECK:   %{{.*}} : !i32 = arith.ceildivsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "ceildivi_index"] {
^1(%3 : !index, %4 : !index):
  %5 : !index = arith.ceildivsi(%3 : !index, %4 : !index)
  func.return(%5 : !index)
}

// CHECK:   %{{.*}} : !index = arith.ceildivsi(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "floordivi"] {
^2(%6 : !i32, %7 : !i32):
  %8 : !i32 = arith.floordivsi(%6 : !i32, %7 : !i32)
  func.return(%8 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.floordivsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "floordivi_index"] {
^3(%9 : !index, %10 : !index):
  %11 : !index = arith.floordivsi(%9 : !index, %10 : !index)
  func.return(%11 : !index)
}

// CHECK:   %{{.*}} : !index = arith.floordivsi(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "ceildivui"] {
^4(%12 : !i32, %13 : !i32):
  %14 : !i32 = arith.ceildivui(%12 : !i32, %13 : !i32)
  func.return(%14 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.ceildivui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "ceildivui_index"] {
^5(%15 : !index, %16 : !index):
  %17 : !index = arith.ceildivui(%15 : !index, %16 : !index)
  func.return(%17 : !index)
}

// CHECK:   %{{.*}} : !index = arith.ceildivui(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "remsi"] {
^4(%12 : !i32, %13 : !i32):
  %14 : !i32 = arith.remsi(%12 : !i32, %13 : !i32)
  func.return(%14 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.remsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "remui"] {
^4(%12 : !i32, %13 : !i32):
  %14 : !i32 = arith.remui(%12 : !i32, %13 : !i32)
  func.return(%14 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.remui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "maxf"] {
^6(%18 : !f32, %19 : !f32):
  %20 : !f32 = arith.maxf(%18 : !f32, %19 : !f32)
  func.return(%20 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.maxf(%{{.*}} : !f32, %{{.*}} : !f32)

func.func() ["function_type" = !fun<[!vector<[4 : !index], !f16>, !vector<[4 : !index], !f16>], [!vector<[4 : !index], !f16>]>, "sym_name" = "maxf16_vector"] {
^7(%21 : !vector<[4 : !index], !f16>, %22 : !vector<[4 : !index], !f16>):
  %23 : !vector<[4 : !index], !f16> = arith.maxf(%21 : !vector<[4 : !index], !f16>, %22 : !vector<[4 : !index], !f16>)
  func.return(%23 : !vector<[4 : !index], !f16>)
}

// CHECK:   %{{.*}} : !vector<[4 : !index], !f16> = arith.maxf(%{{.*}} : !vector<[4 : !index], !f16>, %{{.*}} : !vector<[4 : !index], !f16>)

func.func() ["function_type" = !fun<[!vector<[4 : !index], !f32>, !vector<[4 : !index], !f32>], [!vector<[4 : !index], !f32>]>, "sym_name" = "maxf32_vector"] {
^7(%21 : !vector<[4 : !index], !f32>, %22 : !vector<[4 : !index], !f32>):
  %23 : !vector<[4 : !index], !f32> = arith.maxf(%21 : !vector<[4 : !index], !f32>, %22 : !vector<[4 : !index], !f32>)
  func.return(%23 : !vector<[4 : !index], !f32>)
}

// CHECK:   %{{.*}} : !vector<[4 : !index], !f32> = arith.maxf(%{{.*}} : !vector<[4 : !index], !f32>, %{{.*}} : !vector<[4 : !index], !f32>)


func.func() ["function_type" = !fun<[!vector<[4 : !index], !f64>, !vector<[4 : !index], !f64>], [!vector<[4 : !index], !f64>]>, "sym_name" = "maxf64_vector"] {
^7(%21 : !vector<[4 : !index], !f64>, %22 : !vector<[4 : !index], !f64>):
  %23 : !vector<[4 : !index], !f64> = arith.maxf(%21 : !vector<[4 : !index], !f64>, %22 : !vector<[4 : !index], !f64>)
  func.return(%23 : !vector<[4 : !index], !f64>)
}

// CHECK:   %{{.*}} : !vector<[4 : !index], !f64> = arith.maxf(%{{.*}} : !vector<[4 : !index], !f64>, %{{.*}} : !vector<[4 : !index], !f64>)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "minf"] {
^8(%24 : !f32, %25 : !f32):
  %26 : !f32 = arith.minf(%24 : !f32, %25 : !f32)
  func.return(%26 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.minf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "maxsi"] {
^9(%27 : !i32, %28 : !i32):
  %29 : !i32 = arith.maxsi(%27 : !i32, %28 : !i32)
  func.return(%29 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.maxsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "minsi"] {
^10(%30 : !i32, %31 : !i32):
  %32 : !i32 = arith.minsi(%30 : !i32, %31 : !i32)
  func.return(%32 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.minsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "maxui"] {
^11(%33 : !i32, %34 : !i32):
  %35 : !i32 = arith.maxui(%33 : !i32, %34 : !i32)
  func.return(%35 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.maxui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "minui"] {
^12(%36 : !i32, %37 : !i32):
  %38 : !i32 = arith.minui(%36 : !i32, %37 : !i32)
  func.return(%38 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.minui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "addf"] {
^6(%18 : !f32, %19 : !f32):
  %20 : !f32 = arith.addf(%18 : !f32, %19 : !f32)
  func.return(%20 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.addf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "subf"] {
^6(%18 : !f32, %19 : !f32):
  %20 : !f32 = arith.subf(%18 : !f32, %19 : !f32)
  func.return(%20 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.subf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "mulf"] {
^6(%18 : !f32, %19 : !f32):
  %20 : !f32 = arith.mulf(%18 : !f32, %19 : !f32)
  func.return(%20 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.mulf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "divf"] {
^6(%18 : !f32, %19 : !f32):
  %20 : !f32 = arith.divf(%18 : !f32, %19 : !f32)
  func.return(%20 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.divf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!i1, !i32, !i32], [!i32]>, "sym_name" = "select_int"] {
^6(%0 : !i1, %18 : !i32, %19 : !i32):
  %8 : !i32 = arith.select(%0 : !i1, %18 : !i32, %19 : !i32)
  func.return(%8 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.select(%{{.*}} : !i1, %{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i1, !f32, !f32], [!f32]>, "sym_name" = "select_float"] {
^6(%0 : !i1, %18 : !f32, %19 : !f32):
  %8 : !f32 = arith.select(%0 : !i1, %18 : !f32, %19 : !f32)
  func.return(%8 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.select(%{{.*}} : !i1, %{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "shli"] {
^12(%36 : !i32, %37 : !i32):
  %38 : !i32 = arith.shli(%36 : !i32, %37 : !i32)
  func.return(%38 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.shli(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "shrui"] {
^12(%36 : !i32, %37 : !i32):
  %38 : !i32 = arith.shrui(%36 : !i32, %37 : !i32)
  func.return(%38 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.shrui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "shrsi"] {
^12(%36 : !i32, %37 : !i32):
  %38 : !i32 = arith.shrsi(%36 : !i32, %37 : !i32)
  func.return(%38 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.shrsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!f32], [!f64]>, "sym_name" = "extfop"] {
^12(%36 : !f32):
  %38 : !f64 = arith.extf(%36 : !f32)
  func.return(%38 : !f64)
}

// CHECK:   %{{.*}} !f64 = arith.extf(%{{.*}} : !f32)


func.func() ["function_type" = !fun<[!f64], [!f32]>, "sym_name" = "truncfop"] {
^12(%36 : !f64):
  %38 : !f32 = arith.truncf(%36 : !f64)
  func.return(%38 : !f32)
}

// CHECK:   %{{.*}} !f32 = arith.truncf(%{{.*}} : !f64)


// fastmath single flag set
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_reassoc", "fastmath" = !arith.fastmath<reassoc>] {}
// CHECK:   "fastmath" = !arith.fastmath<reassoc>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_nnan", "fastmath" = !arith.fastmath<nnan>] {}
// CHECK:   "fastmath" = !arith.fastmath<nnan>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_ninf", "fastmath" = !arith.fastmath<ninf>] {}
// CHECK:   "fastmath" = !arith.fastmath<ninf>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_nsz", "fastmath" = !arith.fastmath<nsz>] {}
// CHECK:   "fastmath" = !arith.fastmath<nsz>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_arcp", "fastmath" = !arith.fastmath<arcp>] {}
// CHECK:   "fastmath" = !arith.fastmath<arcp>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_contract", "fastmath" = !arith.fastmath<contract>] {}
// CHECK:   "fastmath" = !arith.fastmath<contract>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_afn", "fastmath" = !arith.fastmath<afn>] {}
// CHECK:   "fastmath" = !arith.fastmath<afn>

// fastmath special cases
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_none", "fastmath" = !arith.fastmath<none>] {}
// CHECK:   "fastmath" = !arith.fastmath<none>
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_fast", "fastmath" = !arith.fastmath<fast>] {}
// CHECK:   "fastmath" = !arith.fastmath<fast>

// fastmath combination
func.func() ["function_type" = !fun<[], []>, "sym_name" = "fast_two", "fastmath" = !arith.fastmath<nnan,nsz>] {}
// CHECK:   "fastmath" = !arith.fastmath<nnan,nsz>


}