# This workflow will install MLIR, Python dependencies, run tests and lint with a single version of Python

name: CI - MLIR-based Testing

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.10']

    env:
      LLVM_SYMBOLIZER_PATH: /usr/lib/llvm-11/bin/llvm-symbolizer
      MLIR-Version: 74992f4a5bb79e2084abdef406ef2e5aa2024368
    steps:
    - uses: actions/checkout@v3

    - name: Python Setup
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Clang Setup
      uses: egor-tensin/setup-clang@v1

    - name: Ninja Setup
      uses: lukka/get-cmake@9e431acfe656e5db66cd4930386328fce59cfaba

    - name: CCache Setup (C++ compilation)
      uses: hendrikmuhs/ccache-action@v1.2.5
      with:
        key: ${{ runner.os }}-${{ env.MLIR-Version }}
        restore-keys: ${{ runner.os }}-${{ env.MLIR-Version }}
        # LLVM needs serious cache size
        max-size: 6G

    - name: Checkout project
      uses: actions/checkout@v3
      with:
        path: xdsl

    - name: Checkout MLIR
      uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project.git
        path: llvm-project
        ref: ${{ env.MLIR-Version }}

    - name: Upgrade pip
      run: |
        pip install --upgrade pip

    - name: Install the package locally
      run: pip install -e .[extras]

    - name: MLIR Build Setup
      run: |
        pip install -r ${GITHUB_WORKSPACE}/llvm-project/mlir/python/requirements.txt
        mkdir llvm-project/build
        cd llvm-project/build
        cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_LLD=ON -DMLIR_ENABLE_BINDINGS_PYTHON=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: MLIR Build
      run: |
        cd llvm-project/build
        cmake --build . --target mlir-opt MLIRPythonModules

    - name: Test with pytest and generate code coverage
      run: |
        cd xdsl
        # Add the MLIR Python bindings to the PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:${GITHUB_WORKSPACE}/llvm-project/build/tools/mlir/python_packages/mlir_core
        pytest --cov --cov-config=.coveragerc tests

    - name: Execute lit tests
      run: |
        cd xdsl
        export PYTHONPATH=$(pwd)
        # Add mlir-opt to the path
        export PATH=$PATH:${GITHUB_WORKSPACE}/llvm-project/build/bin/
        # Add the MLIR Python bindings to the PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:${GITHUB_WORKSPACE}/llvm-project/build/tools/mlir/python_packages/mlir_core
        lit -v tests/filecheck/ -DCOVERAGE -DCOVERAGE_CONFIG=$(pwd)/.coveragerc

    - name: Combine coverage data
      run: |
        coverage combine --append $(find xdsl/tests/filecheck -type d)
        coverage report --data-file=xdsl/.coverage
        coverage xml --data-file=xdsl/.coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        verbose: true
        directory: ${GITHUB_WORKSPACE}/../
        files: coverage.xml
