// RUN: xdsl-opt -t mlir %s | mlir-opt --mlir-print-op-generic | xdsl-opt -f mlir -t mlir | filecheck %s

builtin.module() {
  
  memref.global() ["sym_name" = "g", "type" = !memref<[1 : !i64], !index>, "initial_value" = !dense<!tensor<[1 : !index], !index>, [0 : !i64]>, "sym_visibility" = "public"]

  func.func() ["sym_name" = "memref_test", "function_type" = !fun<[], []>, "sym_visibility" = "private"] {
    %0 : !memref<[1 : !i64], !index> = memref.get_global() ["name" = @g]
    %1 : !index = arith.constant() ["value" = 0 : !index]
    %2 : !memref<[1 : !index], !index> = memref.alloca() ["alignment" = 0 : !i64, "operand_segment_sizes" = array<!i32: 0, 0>]
    %3 : !index = arith.constant() ["value" = 42 : !index]
    memref.store(%3 : !index, %2 : !memref<[1 : !index], !index>, %1 : !index)
    %4 : !index = memref.load(%2 : !memref<[1 : !index], !index>, %1 : !index)
    %5 : !memref<[10 : !index, 2 : !index], !index> = memref.alloc() ["alignment" = 0 : !i64, "operand_segment_sizes" = array<!i32: 0, 0>]
    memref.store(%3 : !index, %5 : !memref<[10 : !index, 2 : !index], !index>, %3 : !index, %4 : !index)
    memref.dealloc(%2 : !memref<[1 : !index], !index>)
    memref.dealloc(%5 : !memref<[10 : !index, 2 : !index], !index>)
    func.return()
  }

// CHECK: "builtin.module"() ({
// CHECK-NEXT: "memref.global"() {"initial_value" = dense<[0]> : tensor<1xindex>, "sym_name" = "g", "sym_visibility" = "public", "type" = memref<1xindex>} : () -> ()
// CHECK-NEXT: "func.func"() ({
// CHECK-NEXT: %0 = "memref.get_global"() {"name" = @g} : () -> memref<1xindex>
// CHECK-NEXT: %1 = "arith.constant"() {"value" = 0 : index} : () -> index
// CHECK-NEXT: %2 = "memref.alloca"() {"alignment" = 0 : i64, "operand_segment_sizes" = array<i32: 0, 0>} : () -> memref<1xindex>
// CHECK-NEXT: %3 = "arith.constant"() {"value" = 42 : index} : () -> index
// CHECK-NEXT: "memref.store"(%3, %2, %1) : (index, memref<1xindex>, index) -> ()
// CHECK-NEXT: %4 = "memref.load"(%2, %1) : (memref<1xindex>, index) -> index
// CHECK-NEXT: %5 = "memref.alloc"() {"alignment" = 0 : i64, "operand_segment_sizes" = array<i32: 0, 0>} : () -> memref<10x2xindex>
// CHECK-NEXT: "memref.store"(%3, %5, %3, %4) : (index, memref<10x2xindex>, index, index) -> ()
// CHECK-NEXT: "memref.dealloc"(%2) : (memref<1xindex>) -> ()
// CHECK-NEXT: "memref.dealloc"(%5) : (memref<10x2xindex>) -> ()
// CHECK-NEXT: "func.return"() : () -> ()
// CHECK-NEXT: }) {"function_type" = () -> (), "sym_name" = "memref_test", "sym_visibility" = "private"} : () -> ()
// CHECK-NEXT: }) : () -> ()

}
