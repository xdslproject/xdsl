// RUN: xdsl-opt %s | xdsl-opt | filecheck %s

builtin.module() {
  func.func() ["sym_name" = "if", "function_type" = !fun<[], []>, "sym_visibility" = "private"] {
    %0 : !i1 = arith.constant() ["value" = true]
    scf.if(%0 : !i1) 
    {
        %1 : !i32 = arith.constant() ["value" = 42 : !i32]
        scf.yield()
    } 
    {
        %2 : !i32 = arith.constant() ["value" = 24 : !i32]
        scf.yield()
    }
    %5 : !i32 = scf.if(%0 : !i1) 
    {
        %3 : !i32 = arith.constant() ["value" = 42 : !i32]
        scf.yield(%3 : !i32)
    } 
    {
        %4 : !i32 = arith.constant() ["value" = 24 : !i32]
        scf.yield(%4 : !i32)
    }
    func.return()
  }

  // CHECK: func.func() ["sym_name" = "if"
  // CHECK-NEXT:  %{{.*}} : !i1 = arith.constant() ["value" = true]
  // CHECK-NEXT:  scf.if(%{{.*}} : !i1) {
  // CHECK-NEXT:    %{{.*}} : !i32 = arith.constant() ["value" = 42 : !i32]
  // CHECK-NEXT:    scf.yield()
  // CHECK-NEXT:  } {
  // CHECK-NEXT:    %{{.*}} : !i32 = arith.constant() ["value" = 24 : !i32]
  // CHECK-NEXT:    scf.yield()
  // CHECK-NEXT:  }
  // CHECK-NEXT:  %{{.*}} : !i32 = scf.if(%{{.*}} : !i1) {
  // CHECK-NEXT:    %{{.*}} : !i32 = arith.constant() ["value" = 42 : !i32]
  // CHECK-NEXT:    scf.yield(%{{.*}} : !i32)
  // CHECK-NEXT:  } {
  // CHECK-NEXT:    %{{.*}} : !i32 = arith.constant() ["value" = 24 : !i32]
  // CHECK-NEXT:    scf.yield(%{{.*}} : !i32)
  // CHECK-NEXT:  }
  // CHECK-NEXT:  func.return()
  // CHECK-NEXT:}

  func.func() ["sym_name" = "while", "function_type" = !fun<[], []>, "sym_visibility" = "private"]
  {
    %init : !i32 = arith.constant()["value" = 0 : !i32]
    %res : !i32 = scf.while(%init : !i32)
    {
    ^0(%arg : !i32):
      %zero : !i32 = arith.constant()["value" = 0 : !i32]
      %c : !i1 = arith.cmpi(%zero : !i32, %arg : !i32) ["predicate" = 1 : !i64]
      scf.condition(%c : !i1, %zero : !i32)
    }
    {
    ^1(%arg2 : !i32):
       scf.yield(%arg2 : !i32)
    }
    func.return()
  }
 
  // CHECK: func.func() ["sym_name" = "while"
  // CHECK-NEXT:  %{{.*}} : !i32 = arith.constant() ["value" = 0 : !i32]
  // CHECK-NEXT:  %{{.*}} : !i32 = scf.while(%{{.*}} : !i32) {
  // CHECK-NEXT:  ^{{.*}}(%{{.*}} : !i32):
  // CHECK-NEXT:    %{{.*}} : !i32 = arith.constant() ["value" = 0 : !i32]
  // CHECK-NEXT:    %{{.*}} : !i1 = arith.cmpi(%{{.*}} : !i32, %{{.*}} : !i32) ["predicate" = 1 : !i64]
  // CHECK-NEXT:    scf.condition(%{{.*}} : !i1, %{{.*}} : !i32)
  // CHECK-NEXT:  } {
  // CHECK-NEXT:  ^{{.*}}(%{{.*}} : !i32):
  // CHECK-NEXT:    scf.yield(%{{.*}} : !i32)
  // CHECK-NEXT:  }
  // CHECK-NEXT:  func.return()
  // CHECK-NEXT:}

  func.func() ["sym_name" = "for", "function_type" = !fun<[], []>, "sym_visibility" = "private"]
  {
    %lb : !index = arith.constant()["value" = 0 : !index]
    %ub : !index = arith.constant()["value" = 42 : !index]
    %s : !index = arith.constant()["value" = 3 : !index]
    %prod : !index = arith.constant()["value" = 1 : !index]

    %res : !index = scf.for(%lb : !index, %ub : !index, %s : !index, %prod: !index)
    {
    ^0(%iv : !index, %prod_iter : !index):
      %prod_new : !index = arith.muli(%prod_iter : !index, %iv : !index)
      scf.yield(%prod_new : !index)
    }

    func.return()
  }

  // CHECK: func.func() ["sym_name" = "for"
  // CHECK-NEXT:  %{{.*}} : !index = arith.constant() ["value" = 0 : !index]
  // CHECK-NEXT:  %{{.*}} : !index = arith.constant() ["value" = 42 : !index]
  // CHECK-NEXT:  %{{.*}} : !index = arith.constant() ["value" = 3 : !index]
  // CHECK-NEXT:  %{{.*}} : !index = arith.constant() ["value" = 1 : !index]
  // CHECK-NEXT:  %{{.*}} : !index = scf.for(%{{.*}} : !index, %{{.*}} : !index, %{{.*}} : !index, %{{.*}} : !index) {
  // CHECK-NEXT:  ^{{.*}}(%{{.*}} : !index, %{{.*}} : !index):
  // CHECK-NEXT:    %{{.*}} : !index = arith.muli(%{{.*}} : !index, %{{.*}} : !index)
  // CHECK-NEXT:    scf.yield(%{{.*}} : !index)
  // CHECK-NEXT:  }
  // CHECK-NEXT:  func.return()
  // CHECK-NEXT:}
}
