// RUN: xdsl_opt.py %s | xdsl_opt.py | filecheck %s

module() {

  func.func() ["sym_name" = "sum_vec", "function_type" = !fun<[!memref<[128 : !index], !i32>], [!i32]>, "sym_visibility" = "private"] {
  ^10(%ref : !memref<[128 : !index], !i32>):
    %const0 : !i32 = arith.constant() ["value" = 0 : !i32]
    %r : !i32 = affine.for(%const0 : !i32) ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
    ^11(%i : !index, %sum : !i32):
      %val : !i32 = memref.load(%ref : !memref<[128 : !index], !i32>, %i : !index)
      %res : !i32 = arith.addi(%sum : !i32, %val : !i32)
      affine.yield(%res : !i32)
    }
    func.return(%r : !i32)
  }

// CHECK: func.func() ["sym_name" = "sum_vec",
// CHECK-NEXT: ^{{.*}}(%{{.*}} : !memref<[128 : !index], !i32>):
// CHECK-NEXT:   %{{.*}} : !i32 = arith.constant() ["value" = 0 : !i32]
// CHECK-NEXT:   %{{.*}} : !i32 = affine.for(%{{.*}} : !i32) ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
// CHECK-NEXT:   ^{{.*}}(%{{.*}} : !index, %{{.*}} : !i32):
// CHECK-NEXT:     %{{.*}} : !i32 = memref.load(%{{.*}} : !memref<[128 : !index], !i32>, %{{.*}} : !index)
// CHECK-NEXT:     %{{.*}} : !i32 = arith.addi(%{{.*}} : !i32, %{{.*}} : !i32)
// CHECK-NEXT:     affine.yield(%{{.*}} : !i32)
// CHECK-NEXT:   }
// CHECK-NEXT:   func.return(%{{.*}} : !i32)
// CHECK-NEXT: }


  func.func() ["sym_name" = "affine_mm", "function_type" = !fun<[!memref<[256 : !index, 256 : !index], !f32>, !memref<[256 : !index, 256 : !index], !f32>, !memref<[256 : !index, 256 : !index], !f32>], [!f32]>, "sym_visibility" = "private"] {
  ^0(%0 : !memref<[256 : !index, 256 : !index], !f32>, %1 : !memref<[256 : !index, 256 : !index], !f32>, %2 : !memref<[256 : !index, 256 : !index], !f32>):
    affine.for() ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
    ^1(%3 : !index):
      affine.for() ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
      ^2(%4 : !index):
        affine.for() ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
        ^3(%7 : !index):
          %9 : !f32 = memref.load(%0 : !memref<[256 : !index, 256 : !index], !f32>, %3 : !index, %7 : !index)
          %10 : !f32 = memref.load(%1 : !memref<[256 : !index, 256 : !index], !f32>, %7 : !index, %4 : !index)
          %11 : !f32 = memref.load(%2 : !memref<[256 : !index, 256 : !index], !f32>, %3 : !index, %4 : !index)
          %12 : !f32 = arith.mulf(%9 : !f32, %10 : !f32)
          %13 : !f32 = arith.addf(%11 : !f32, %12 : !f32)
          memref.store(%13 : !f32, %2 : !memref<[256 : !index, 256 : !index], !f32>, %3 : !index, %4 : !index)
        }
      }
    }
    func.return(%2 : !memref<[256 : !index, 256 : !index], !f32>)
  }

// CHECK: func.func() ["sym_name" = "affine_mm",
// CHECK-NEXT:  ^{{.*}}(%{{.*}} : !memref<[256 : !index, 256 : !index], !f32>, %{{.*}} : !memref<[256 : !index, 256 : !index], !f32>, %{{.*}} : !memref<[256 : !index, 256 : !index], !f32>):
// CHECK-NEXT:    affine.for() ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
// CHECK-NEXT:    ^{{.*}}(%{{.*}} : !index):
// CHECK-NEXT:      affine.for() ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
// CHECK-NEXT:      ^{{.*}}(%{{.*}} : !index):
// CHECK-NEXT:        affine.for() ["lower_bound" = 0 : !index, "upper_bound" = 256 : !index, "step" = 1 : !index] {
// CHECK-NEXT:        ^{{.*}}(%{{.*}} : !index):
// CHECK-NEXT:          %{{.*}} : !f32 = memref.load(%{{.*}} : !memref<[256 : !index, 256 : !index], !f32>, %{{.*}} : !index, %{{.*}} : !index)
// CHECK-NEXT:          %{{.*}} : !f32 = memref.load(%{{.*}} : !memref<[256 : !index, 256 : !index], !f32>, %{{.*}} : !index, %{{.*}} : !index)
// CHECK-NEXT:          %{{.*}} : !f32 = memref.load(%{{.*}} : !memref<[256 : !index, 256 : !index], !f32>, %{{.*}} : !index, %{{.*}} : !index)
// CHECK-NEXT:          %{{.*}} : !f32 = arith.mulf(%{{.*}} : !f32, %{{.*}} : !f32)
// CHECK-NEXT:          %{{.*}} : !f32 = arith.addf(%{{.*}} : !f32, %{{.*}} : !f32)
// CHECK-NEXT:          memref.store(%{{.*}} : !f32, %{{.*}} : !memref<[256 : !index, 256 : !index], !f32>, %{{.*}} : !index, %{{.*}} : !index)
// CHECK-NEXT:        }
// CHECK-NEXT:      }
// CHECK-NEXT:    }
// CHECK-NEXT:    func.return(%{{.*}} : !memref<[256 : !index, 256 : !index], !f32>)
// CHECK-NEXT:  }

}
