// RUN: xdsl-opt %s | xdsl-opt | filecheck %s

builtin.module() {
func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "ceildivi"] {
^0(%0 : !i32, %1 : !i32):
  %2 : !i32 = arith.ceildivsi(%0 : !i32, %1 : !i32)
  func.return(%2 : !i32)
}

//CHECK:   %{{.*}} : !i32 = arith.ceildivsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "ceildivi_index"] {
^1(%3 : !index, %4 : !index):
  %5 : !index = arith.ceildivsi(%3 : !index, %4 : !index)
  func.return(%5 : !index)
}

// CHECK:   %{{.*}} : !index = arith.ceildivsi(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "floordivi"] {
^2(%6 : !i32, %7 : !i32):
  %8 : !i32 = arith.floordivsi(%6 : !i32, %7 : !i32)
  func.return(%8 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.floordivsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "floordivi_index"] {
^3(%9 : !index, %10 : !index):
  %11 : !index = arith.floordivsi(%9 : !index, %10 : !index)
  func.return(%11 : !index)
}

// CHECK:   %{{.*}} : !index = arith.floordivsi(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "ceildivui"] {
^4(%12 : !i32, %13 : !i32):
  %14 : !i32 = arith.ceildivui(%12 : !i32, %13 : !i32)
  func.return(%14 : !i32)
}

// CHECK:   %{{.*}} : !i32 = arith.ceildivui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!index, !index], [!index]>, "sym_name" = "ceildivui_index"] {
^5(%15 : !index, %16 : !index):
  %17 : !index = arith.ceildivui(%15 : !index, %16 : !index)
  func.return(%17 : !index)
}

// CHECK:   %{{.*}} : !index = arith.ceildivui(%{{.*}} : !index, %{{.*}} : !index)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "maxf"] {
^6(%18 : !f32, %19 : !f32):
  %20 : !f32 = arith.maxf(%18 : !f32, %19 : !f32)
  func.return(%20 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.maxf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!vector<[4 : !index], !f32>, !vector<[4 : !index], !f32>], [!vector<[4 : !index], !f32>]>, "sym_name" = "maxf_vector"] {
^7(%21 : !vector<[4 : !index], !f32>, %22 : !vector<[4 : !index], !f32>):
  %23 : !vector<[4 : !index], !f32> = arith.maxf(%21 : !vector<[4 : !index], !f32>, %22 : !vector<[4 : !index], !f32>)
  func.return(%23 : !vector<[4 : !index], !f32>)
}

// CHECK:   %{{.*}} : !vector<[4 : !index], !f32> = arith.maxf(%{{.*}} : !vector<[4 : !index], !f32>, %{{.*}} : !vector<[4 : !index], !f32>)


func.func() ["function_type" = !fun<[!f32, !f32], [!f32]>, "sym_name" = "minf"] {
^8(%24 : !f32, %25 : !f32):
  %26 : !f32 = arith.minf(%24 : !f32, %25 : !f32)
  func.return(%26 : !f32)
}

// CHECK:   %{{.*}} : !f32 = arith.minf(%{{.*}} : !f32, %{{.*}} : !f32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "maxsi"] {
^9(%27 : !i32, %28 : !i32):
  %29 : !i32 = arith.maxsi(%27 : !i32, %28 : !i32)
  func.return(%29 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.maxsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "minsi"] {
^10(%30 : !i32, %31 : !i32):
  %32 : !i32 = arith.minsi(%30 : !i32, %31 : !i32)
  func.return(%32 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.minsi(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "maxui"] {
^11(%33 : !i32, %34 : !i32):
  %35 : !i32 = arith.maxui(%33 : !i32, %34 : !i32)
  func.return(%35 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.maxui(%{{.*}} : !i32, %{{.*}} : !i32)


func.func() ["function_type" = !fun<[!i32, !i32], [!i32]>, "sym_name" = "minui"] {
^12(%36 : !i32, %37 : !i32):
  %38 : !i32 = arith.minui(%36 : !i32, %37 : !i32)
  func.return(%38 : !i32)
}

// CHECK:   %{{.*}} !i32 = arith.minui(%{{.*}} : !i32, %{{.*}} : !i32)
}
