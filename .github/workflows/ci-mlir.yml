# This workflow will install MLIR, Python dependencies, run tests and lint with a single version of Python

name: CI - MLIR-based Testing

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    env:
      LLVM_SYMBOLIZER_PATH: /usr/lib/llvm-11/bin/llvm-symbolizer
      MLIR-Version: 89996621de073e43de7bed552037b10d2a0fdf80
    steps:
      - uses: actions/checkout@v3
        with:
          path: xdsl

      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          path: xdsl

      - name: Upgrade pip
        run: |
          pip install --upgrade pip

      - name: Upgrade pip
        run: |
          pip install --upgrade pip

      - name: Install the package locally
        run: |
          # Change directory so that xdsl-opt can be found during installation.
          cd xdsl
          pip install -e .[extras]

      - name: Install CI dependencies
        run: |
          pip install codecov

      - name: Cache binaries
        id: cache-binary
        uses: actions/cache@v3
        with:
          path: llvm-project/build
          key: binaries-${{ runner.os }}-${{ env.MLIR-Version }}
          restore-keys: binaries-${{ runner.os }}-${{ env.MLIR-Version }}
          append-timestamp: false

      - name: Cache requirements
        id: cache-requirements
        uses: actions/cache@v3
        with:
          path: llvm-project/mlir/python/requirements.txt
          key: requirements-${{ runner.os }}-${{ env.MLIR-Version }}
          restore-keys: requirements-${{ runner.os }}-${{ env.MLIR-Version }}
          append-timestamp: false

      - name: Clang Setup
        if: steps.cache-binary.outputs.cache-hit != 'true'
        uses: egor-tensin/setup-clang@v1

      - name: Ninja Setup
        if: steps.cache-binary.outputs.cache-hit != 'true'
        uses: lukka/get-cmake@9e431acfe656e5db66cd4930386328fce59cfaba

      - name: Checkout MLIR
        if: ${{ (steps.cache-binary.outputs.cache-hit != 'true') || (steps.cache-requirements.outputs.cache-hit != true) }}
        uses: actions/checkout@v3
        with:
          repository: llvm/llvm-project.git
          path: llvm-project
          ref: ${{ env.MLIR-Version }}

      - name: Install Python Bindings Requirements
        run: pip install -r ${GITHUB_WORKSPACE}/llvm-project/mlir/python/requirements.txt

      - name: MLIR Build Setup
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          mkdir -p llvm-project/build
          cd llvm-project/build
          cmake -G Ninja ../llvm -DPython3_EXECUTABLE=python3 -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_LLD=ON -DMLIR_ENABLE_BINDINGS_PYTHON=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON

      - name: Restore binary folder on reclone
        if: ${{ (steps.cache-binary.outputs.cache-hit == 'true') && (steps.cache-requirements.outputs.cache-hit != true) }}
        uses: actions/cache/restore@v3
        with:
          path: llvm-project/build
          key: binaries-${{ runner.os }}-${{ env.MLIR-Version }}
          restore-keys: binaries-${{ runner.os }}-${{ env.MLIR-Version }}

      - name: MLIR Build
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          cd llvm-project/build
          cmake --build . --target mlir-opt MLIRPythonModules

      - name: Test with pytest and generate code coverage
        run: |
          cd xdsl
          # Add the MLIR Python bindings to the PYTHONPATH
          export PYTHONPATH=${GITHUB_WORKSPACE}/llvm-project/build/tools/mlir/python_packages/mlir_core
          echo $PYTHONPATH
          pytest --cov --cov-config=.coveragerc .

      - name: Execute lit tests
        run: |
          cd xdsl
          export PYTHONPATH=$(pwd)
          # Add mlir-opt to the path
          export PATH=$PATH:${GITHUB_WORKSPACE}/llvm-project/build/bin/
          # Add the MLIR Python bindings to the PYTHONPATH
          export PYTHONPATH=$PYTHONPATH:${GITHUB_WORKSPACE}/llvm-project/build/tools/mlir/python_packages/mlir_core
          lit -v tests/filecheck/ -DCOVERAGE -DEXEC_DIR=$(pwd)

      - name: Combine coverage data
        run: |
          cd xdsl
          coverage combine --append
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          verbose: true
          directory: ${GITHUB_WORKSPACE}/../
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
