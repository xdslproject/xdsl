// RUN: xdsl-opt -t mlir %s | xdsl-opt -t mlir -f mlir | filecheck %s


builtin.module() {
  // Type tests
  func.func() ["sym_name" = "struct_to_struct", "function_type" = !fun<[!llvm.struct<(!i32)>], [!llvm.struct<(!i32)>]>, "sym_visibility" = "private"] {
  // CHECK: func.func
    ^0(%0 : !llvm.struct<(!i32)>):
  // CHECK-NEXT: ^0(%0 : !llvm.struct<(i32)>):
      func.return(%0 : !llvm.struct<(!i32)>)
  // CHECK-NEXT:   "func.return"(%{{.*}}) : (!llvm.struct<(i32)>) -> ()
  }
  // CHECK-NEXT: }) {"sym_name" = "struct_to_struct", "function_type" = (!llvm.struct<(i32)>) -> !llvm.struct<(i32)>, "sym_visibility" = "private"} : () -> ()

  func.func() ["sym_name" = "struct_to_struct2", "function_type" = !fun<[!llvm.struct<(!i32, !i32)>], [!llvm.struct<(!i32, !i32)>]>, "sym_visibility" = "private"] {
    // CHECK: func.func
    ^1(%1 : !llvm.struct<(!i32, !i32)>):
    // CHECK-NEXT: ^1(%1 : !llvm.struct<(i32, i32)>):
      func.return(%1 : !llvm.struct<(!i32, !i32)>)
    // CHECK-NEXT: "func.return"(%{{.*}}) : (!llvm.struct<(i32, i32)>) -> ()
  }
  // CHECK-NEXT: }) {"sym_name" = "struct_to_struct2", "function_type" = (!llvm.struct<(i32, i32)>) -> !llvm.struct<(i32, i32)>, "sym_visibility" = "private"} : () -> ()

  func.func() ["sym_name" = "nested_struct_to_struct", "function_type" = !fun<[!llvm.struct<(!llvm.struct<(!i32)>)>], [!llvm.struct<(!llvm.struct<(!i32)>)>]>, "sym_visibility" = "private"] {
  // CHECK:  func.func
    ^1(%1 : !llvm.struct<(!llvm.struct<(!i32)>)>):
    // CHECK-NEXT: ^2(%2 : !llvm.struct<(!llvm.struct<(i32)>)>):
      func.return(%1 : !llvm.struct<(!llvm.struct<(!i32)>)>)
  // CHECK-NEXT:  "func.return"(%{{.*}}) : (!llvm.struct<(!llvm.struct<(i32)>)>) -> ()
  }
  // CHECK-NEXT:}) {"sym_name" = "nested_struct_to_struct", "function_type" = (!llvm.struct<(!llvm.struct<(i32)>)>) -> !llvm.struct<(!llvm.struct<(i32)>)>, "sym_visibility" = "private"} : () -> ()

  // Op tests
  func.func() ["sym_name" = "main", "function_type" = !fun<[], []>, "sym_visibility" = "public"] {
  // CHECK:  func.func
    %2 : !i32 = arith.constant() ["value" = 1 : !i32]
  // CHECK-NEXT:  %{{.*}} = "arith.constant"() {"value" = 1 : i32} : () -> i32
    %3 : !llvm.struct<(!i32)> = llvm.mlir.undef()
  // CHECK-NEXT: %{{.*}} = "llvm.mlir.undef"() : () -> !llvm.struct<(i32)>
    %4 : !llvm.struct<(!i32)> = llvm.insertvalue(%3 : !llvm.struct<(!i32)>, %2 : !i32) ["position" = array<!i64: 0>]
  // CHECK-NEXT: %{{.*}} = "llvm.insertvalue"(%{{.*}}, %{{.*}}) {"position" = array<i64: 0>} : (!llvm.struct<(i32)>, i32) -> !llvm.struct<(i32)>
    %5 : !i32 = llvm.extractvalue(%4 : !llvm.struct<(!i32)>) ["position" = array<!i64: 0>]
  // CHECK-NEXT: %{{.*}} = "llvm.extractvalue"(%{{.*}}) {"position" = array<i64: 0>} : (!llvm.struct<(i32)>) -> i32
    func.return()
  // CHECK-NEXT:  return
  }
  // CHECK-NEXT: }) {"sym_name" = "main", "function_type" = () -> (), "sym_visibility" = "public"} : () -> ()
}
// CHECK-NEXT: }) : () -> ()
