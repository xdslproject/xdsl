// RUN: xdsl-opt %s | xdsl-opt | filecheck %s

builtin.module() {
  
  func.func() ["sym_name" = "unconditional_br", "function_type" = !fun<[], []>, "sym_visibility" = "private"] {
    ^0:
      cf.br() (^1)
    ^1:
      cf.br() (^1)
  }
  // CHECK: func.func() ["sym_name" = "unconditional_br", 
  // CHECK-NEXT:  ^{{.*}}:
  // CHECK-NEXT:    cf.br() (^{{.*}})
  // CHECK-NEXT:  ^{{.*}}:
  // CHECK-NEXT:    cf.br() (^{{.*}})
  // CHECK-NEXT:}

  func.func() ["sym_name" = "br", "function_type" = !fun<[!i32], []>, "sym_visibility" = "private"]
  {
  ^2(%21: !i32):
    cf.br(%21: !i32)(^3)
  ^3(%22: !i32):
    cf.br(%22: !i32)(^3)
  }
  // CHECK: func.func() ["sym_name" = "br"
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i32):
  // CHECK-NEXT:   cf.br(%{{.*}} : !i32) (^{{.*}})
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i32):
  // CHECK-NEXT:   cf.br(%{{.*}} : !i32) (^{{.*}})
  // CHECK-NEXT: }

  func.func() ["sym_name" = "cond_br", "function_type" = !fun<[!i1, !i32], [!i32]>, "sym_visibility" = "private"]
  {
  ^4(%c : !i1, %a: !i32):
    cf.br(%c : !i1, %a : !i32)(^5)
  ^5(%cond : !i1, %arg: !i32):
    cf.cond_br(%cond: !i1, %cond: !i1, %arg : !i32, %arg : !i32, %arg : !i32, %arg : !i32)(^5, ^6) ["operand_segment_sizes" = array<!i32: 1, 2, 3>]
  ^6(%24 : !i32, %25 : !i32, %26 : !i32):
    func.return(%24 : !i32)
  }

  // CHECK: func.func() ["sym_name" = "cond_br", 
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i1, %{{.*}} : !i32):
  // CHECK-NEXT:   cf.br(%{{.*}} : !i1, %{{.*}} : !i32) (^{{.*}})
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i1, %{{.*}} : !i32):
  // CHECK-NEXT:   cf.cond_br(%{{.*}} : !i1, %{{.*}} : !i1, %{{.*}} : !i32, %{{.*}} : !i32, %{{.*}} : !i32, %{{.*}} : !i32) (^{{.*}}, ^{{.*}}) ["operand_segment_sizes" = array<!i32: 1, 2, 3>]
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i32, %{{.*}} : !i32, %{{.*}} : !i32):
  // CHECK-NEXT:   func.return(%{{.*}} : !i32)
  // CHECK-NEXT: }
}
