import lit.formats
import os
from pathlib import Path

config.test_source_root = os.path.dirname(__file__)
xdsl_src = Path(config.test_source_root).parent.parent


config.name = "xDSL"
config.suffixes = ['.test', '.mlir', '.py']

config.substitutions.append(('XDSL_ROUNDTRIP', "xdsl-opt %s --print-op-generic --split-input-file | xdsl-opt --split-input-file | filecheck %s"))
config.substitutions.append(("XDSL_GENERIC_ROUNDTRIP", "xdsl-opt %s --print-op-generic --split-input-file | filecheck %s --check-prefix=CHECK-GENERIC"))

if "COVERAGE" in lit_config.params:
    # If we collect coverage, cd to root so that the paths relative to the Python path
    # match with the paths relative to the root of the repo.
    config.test_format = lit.formats.ShTest(preamble_commands=[f"cd {xdsl_src}"])

    # We also need to actually collect coverage for each command executed, and adjust
    config.substitutions.append(('xdsl-opt', f"coverage run xdsl/tools/xdsl_opt.py"))
    config.substitutions.append(('xdsl-run', f"coverage run xdsl/tools/xdsl_run.py"))
    config.substitutions.append(('irdl-to-pyrdl', f"coverage run xdsl/tools/irdl_to_pyrdl.py"))
    config.substitutions.append(('python', f"coverage run"))
else:
    config.test_format = lit.formats.ShTest()


# checking if maxIndividualTestTime is available on the platform and sets
# it to 20sec if so, declares lit-max-individual-test-time feature for
# further checking by tests.
supported, errormsg = lit_config.maxIndividualTestTimeIsSupported
if supported:
    config.available_features.add("lit-max-individual-test-time")
    lit_config.maxIndividualTestTime = 20
else:
    lit_config.warning(
        "Setting a timeout per test not supported. "
        + errormsg
        + " Some tests will be skipped."
    )
