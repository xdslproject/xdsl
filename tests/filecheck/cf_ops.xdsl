// RUN: xdsl_opt.py %s | xdsl_opt.py | filecheck %s

module() {
  
  func.func() ["sym_name" = "unconditional_br", "function_type" = !fun<[], []>, "sym_visibility" = "private"] {
    ^0:
      cf.br() (^1)
    ^1:
      cf.br() (^0)
  }
  // CHECK: func.func() ["sym_name" = "unconditional_br", 
  // CHECK-NEXT:  ^{{.*}}:
  // CHECK-NEXT:    cf.br() (^{{.*}})
  // CHECK-NEXT:  ^{{.*}}:
  // CHECK-NEXT:    cf.br() (^{{.*}})
  // CHECK-NEXT:}

  func.func() ["sym_name" = "br", "function_type" = !fun<[!i32], [!i32]>, "sym_visibility" = "private"]
  {
  ^2(%22: !i32):
    cf.br(%22: !i32)(^2)
  }
  // CHECK: func.func() ["sym_name" = "br"
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i32):
  // CHECK-NEXT:   cf.br(%{{.*}} : !i32) (^{{.*}})
  // CHECK-NEXT: }

  func.func() ["sym_name" = "cond_br", "function_type" = !fun<[!i32], [!i32]>, "sym_visibility" = "private"]
  {
  ^3(%cond : !i1, %arg: !i32):
    cf.cond_br(%cond: !i1, %cond: !i1, %arg : !i32, %arg : !i32, %arg : !i32, %arg : !i32)(^3, ^4) ["operand_segment_sizes" = !dense<!vector<[2 : !i64], !i32>, [2 : !i32, 3 : !i32]>]
  ^4(%24 : !i32, %25 : !i32, %26 : !i32):
    func.return(%24 : !i32)
  }

  // CHECK: func.func() ["sym_name" = "cond_br", 
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i1, %{{.*}} : !i32):
  // CHECK-NEXT:   cf.cond_br(%{{.*}} : !i1, %{{.*}} : !i1, %{{.*}} : !i32, %{{.*}} : !i32, %{{.*}} : !i32, %{{.*}} : !i32) (^{{.*}}, ^{{.*}}) ["operand_segment_sizes" = !dense<!vector<[2 : !i64], !i32>, [2 : !i32, 3 : !i32]>]
  // CHECK-NEXT: ^{{.*}}(%{{.*}} : !i32, %{{.*}} : !i32, %{{.*}} : !i32):
  // CHECK-NEXT:   func.return(%{{.*}} : !i32)
  // CHECK-NEXT: }
}
